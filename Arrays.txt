Arrays:
-------

Q)Sort Colors:
  ------------

package com.dsa;

import java.util.Arrays;

public class SortColors {
	public static void main(String[] args) {
		int a[] = { 2 };
		//sortColors(a);
		sortColorsOptimal(a);
		System.out.println(Arrays.toString(a));
	}

	private static void sortColorsOptimal(int[] nums) {
		int low=0,mid=0,high=nums.length-1;

        while(mid<=high)
        {
            if(nums[mid]==0)
            {
                swap(nums,mid,low);
                low++;
                mid++;
            }
            else if(nums[mid]==1)
            {
                mid++;
            }
            else
            {
                swap(nums,mid,high);
                high--;
            }
            System.out.println(Arrays.toString(nums));
        }
	}
	public static void swap(int a[],int i,int j)
    {
		int temp=a[i];
		a[i]=a[j];
		a[j]=temp;
    }
	private static void sortColors(int[] nums) {
		int zero = 0, one = 0, two = 0;
		int n = nums.length;
		for (int i = 0; i < n; i++) {
			if (nums[i] == 0)
				zero++;
			else if (nums[i] == 1)
				one++;
			else
				two++;
		}
		//System.out.println(zero + " " + one + " " + two);
		int temp[] = new int[nums.length];
		for (int i = 0; i < zero; i++) {
			temp[i] = 0;
		}
	//	System.out.println(Arrays.toString(temp));
		for (int i = zero; i < zero + one; i++) {
			temp[i] = 1;
		}
	//	System.out.println(Arrays.toString(temp));
		for (int i = zero + one; i < n; i++) {
			temp[i] = 2;
		}
		//System.out.println(Arrays.toString(temp));
		for (int i = 0; i < temp.length; i++) {
			nums[i] = temp[i];
		}
	}
}


Q.Maximum Subarray:Kadans

package com.dsa;

public class MaxSubArrays {
	public static void main(String[] args) {
		int nums[] = { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
		System.out.println(findMaxSubArray(nums)); // this takes o(n^2) and TLE error
		System.out.println(findMaxArrayKadans(nums));
	}

	private static int findMaxArrayKadans(int[] nums) {
		int maxSum = Integer.MIN_VALUE;

		int cSum = 0;
		for (int i = 0; i < nums.length; i++) {
			cSum = cSum + nums[i];
			maxSum = Math.max(maxSum, cSum);
			if (cSum < 0)
				cSum = 0;
		}
		return maxSum;
	}

	private static int findMaxSubArray(int[] nums) {
		int maxSum = Integer.MIN_VALUE;
		for (int i = 0; i < nums.length; i++) {
			int sum = 0;
			for (int j = i; j < nums.length; j++) {
				sum = sum + nums[j];
				maxSum = Math.max(maxSum, sum);
			}
		}
		return maxSum;
	}
}

Q.Merge two sorted arrays:

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].


package com.dsa;

import java.util.Arrays;

public class MergeSortedArrays {
	public static void main(String[] args) {
		int nums1[] = { 1, 2, 3, 0, 0, 0 }, nums2[] = { 2, 5, 6 }, m = 3, n = 3;
		//mergeUsingSort(nums1, m, nums2, n);// o(m+n)log(m+n)
		//System.out.println(Arrays.toString(nums1));
		merge(nums1, m, nums2, n);// o(m+n)
		System.out.println(Arrays.toString(nums1));
	}

	// traverse 2nd array and append to first array,then sort
	private static void mergeUsingSort(int[] nums1, int m, int[] nums2, int n) {
		int i = m;
		for (int j = 0; j < n; j++) {
			nums1[i] = nums2[j];
			i++;
		}
		Arrays.sort(nums1);
	}

	public static void merge(int[] nums1, int m, int[] nums2, int n) {
		int left = m - 1;
		int right = n - 1;
		int i = m + n - 1;
		while (right >= 0) {
			if (left >= 0 && nums1[left] >= nums2[right]) {
				nums1[i] = nums1[left];
				left--;
			} else {
				nums1[i] = nums2[right];
				right--;
			}
			i--;
		}
	}
}


Q)Merge Intervals:

package com.dsa;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MergeIntervals {
	public static void main(String[] args) {
		int[][] arr = { { 1, 3 }, { 2, 6 }, { 8, 10 }, { 15, 18 } };
		int[][] res = merge(arr);
		for (int i = 0; i < res.length; i++)
			System.out.println(Arrays.toString(res[i]));
	}

	public static int[][] merge(int[][] intervals) {
		List<int[]> list = new ArrayList<>();
		if (intervals.length == 0 || intervals == null)
			list.toArray(new int[0][0]);
		//if input array is already sorted, this step not required
		Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
		int start = intervals[0][0];
		int end = intervals[0][1];
		for (int[] i : intervals) {
			if (i[0] <= end) {
				end = Math.max(end, i[1]);
			} else {
				list.add(new int[] { start, end });
				start = i[0];
				end = i[1];
			}
		}
		list.add(new int[] { start, end });
		return list.toArray(new int[0][0]);
	}
}
