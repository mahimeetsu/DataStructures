Arrays:
-------

Q)Sort Colors:
  ------------

package com.dsa;

import java.util.Arrays;

public class SortColors {
	public static void main(String[] args) {
		int a[] = { 2 };
		//sortColors(a);
		sortColorsOptimal(a);
		System.out.println(Arrays.toString(a));
	}

	private static void sortColorsOptimal(int[] nums) {
		int low=0,mid=0,high=nums.length-1;

        while(mid<=high)
        {
            if(nums[mid]==0)
            {
                swap(nums,mid,low);
                low++;
                mid++;
            }
            else if(nums[mid]==1)
            {
                mid++;
            }
            else
            {
                swap(nums,mid,high);
                high--;
            }
            System.out.println(Arrays.toString(nums));
        }
	}
	public static void swap(int a[],int i,int j)
    {
		int temp=a[i];
		a[i]=a[j];
		a[j]=temp;
    }
	private static void sortColors(int[] nums) {
		int zero = 0, one = 0, two = 0;
		int n = nums.length;
		for (int i = 0; i < n; i++) {
			if (nums[i] == 0)
				zero++;
			else if (nums[i] == 1)
				one++;
			else
				two++;
		}
		//System.out.println(zero + " " + one + " " + two);
		int temp[] = new int[nums.length];
		for (int i = 0; i < zero; i++) {
			temp[i] = 0;
		}
	//	System.out.println(Arrays.toString(temp));
		for (int i = zero; i < zero + one; i++) {
			temp[i] = 1;
		}
	//	System.out.println(Arrays.toString(temp));
		for (int i = zero + one; i < n; i++) {
			temp[i] = 2;
		}
		//System.out.println(Arrays.toString(temp));
		for (int i = 0; i < temp.length; i++) {
			nums[i] = temp[i];
		}
	}
}


Q.Maximum Subarray:Kadans

package com.dsa;

public class MaxSubArrays {
	public static void main(String[] args) {
		int nums[] = { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
		System.out.println(findMaxSubArray(nums)); // this takes o(n^2) and TLE error
		System.out.println(findMaxArrayKadans(nums));
	}

	private static int findMaxArrayKadans(int[] nums) {
		int maxSum = Integer.MIN_VALUE;

		int cSum = 0;
		for (int i = 0; i < nums.length; i++) {
			cSum = cSum + nums[i];
			maxSum = Math.max(maxSum, cSum);
			if (cSum < 0)
				cSum = 0;
		}
		return maxSum;
	}

	private static int findMaxSubArray(int[] nums) {
		int maxSum = Integer.MIN_VALUE;
		for (int i = 0; i < nums.length; i++) {
			int sum = 0;
			for (int j = i; j < nums.length; j++) {
				sum = sum + nums[j];
				maxSum = Math.max(maxSum, sum);
			}
		}
		return maxSum;
	}
}

