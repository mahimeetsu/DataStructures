Binary Search:

Q)find peak element :
  -------------------

package com.dsa;
public class PeakElement {
	public static void main(String[] args) {
		int[] a = { 1, 2, 3, 4, 5, 6, 1, 2 };
		System.out.println(findPeakbruteForce(a));//O(N)
		System.out.println(findPeakOptimal(a));//O(LOGN)
	}

	private static int findPeakbruteForce(int[] a) {
		int n = a.length;
		for (int i = 0; i < n; i++) {
			if ((i == 0 || a[i - 1] < a[i]) && (i == n - 1 || a[i] > a[i + 1])) {
				return i;
			}
		}
		return -1;
	}
	private static int findPeakOptimal(int[] a) {
		        int n=nums.length;
       		 if(n==1)
            return 0;
        if(nums[0]>nums[1])
            return 0;
        if(nums[n-1]>nums[n-2])
            return n-1;
        int low=1;
        int high=n-2;
        while(low<=high)
        {
            int mid=low+(high-low)/2;

            if(nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1])
                return mid;
            else if(nums[mid]>nums[mid+1])
                high=mid-1;
            else
                low=mid+1;
        }
        return -1;
	}
}



q.Find First and Last Position of Element in Sorted array:
 --------------------------------------------------------

brute force:

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first=-1;
        int last=-1;
       for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==target)
            {
               if(first==-1)
               {
                    first=i;
               }
            last=i;
            }
        
        }
       return new int[]{first,last};
    }
}


optimal:

class Solution {
    public int[] searchRange(int[] nums, int target) {
      int[] result=new int[2];
      result[0]=findFirst(nums,target);
      result[1]=findLast(nums,target);
      return result;
    }

    private int findFirst(int[] nums,int target)
    {
        int first=-1;
        int low=0;
        int high=nums.length-1;
        while(low<=high)
        {
            int mid=(low+high)/2;

            if(nums[mid]==target)
            {
                first=mid;
                high=mid-1;
            }
            else if(nums[mid]<target)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return first;
    }
    private int findLast(int[] nums,int target)
    {
        int last=-1;
        int low=0;
        int high=nums.length-1;
        while(low<=high)
        {
            int mid=(low+high)/2;

            if(nums[mid]==target)
            {
                last=mid;
                low=mid+1;
            }
            else if(nums[mid]<target)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return last;
    }
}

Q.Find minimum in Rotated Sorted Array:
 -------------------------------------

Brute Force:

simple linear search to find min element and takes O(N) time complexity.

Optimal using Binary search:

class Solution {
    public int findMin(int[] nums) {
    int low=0,high=nums.length-1,ans=Integer.MAX_VALUE;

    while(low<=high)
    {
        int mid=low+(high-low)/2;

        if(nums[mid]>=nums[low])
        {
            ans=Math.min(ans,nums[low]);
            low=mid+1;
        }
        else
        {
            ans=Math.min(ans,nums[mid]);
            high=mid-1;
        }
    }
    return ans;
    }
}

Q.First bad Version:
  -----------------

Brute force is using linear search

Optimal: Binary Search:


public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int low=1,high=n;
        int result=n;
        while(low<=high)
        {
            int mid=low+(high-low)/2;

            if(isBadVersion(mid))
            {
                result=mid;
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return result;
    }
}

