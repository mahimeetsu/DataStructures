Sorting:
-------

Bubble Sort:

package com.dsa;

public class BubbleSort {
	public static void main(String[] args) {
		int arr[] = { 100, 90, 80, 70, 60, 50 };
		bubbleSort(arr, arr.length);
		System.out.println("After Sorting:" + Arrays.toString(arr));
	}

	public static void bubbleSort(int a[], int n) {
		for (int i = 0; i < n - 1; i++) {
			int flag = 0;
			for (int j = 0; j < n - 1 - i; j++) {
				if (a[j] > a[j + 1]) {
					int temp = a[j];
					a[j] = a[j + 1];
					a[j + 1] = temp;
					flag = 1;
				}
			}
			if (flag == 0)
				break;
		}
	}
}


Insertion Sort:

package com.dsa;

import java.util.Arrays;

public class InsertionSort {
	public static void main(String[] args) {
		int a[]= {6,5,3,2,1};
		int n=a.length;
		for(int i=0;i<n;i++)
		{
			int j=i;
			while(j>0&&a[j-1]>a[j])
			{
				int temp=a[j-1];
				a[j-1]=a[j];
				a[j]=temp;
				j--;
			}
		}
		System.out.println(Arrays.toString(a));
	}
}



Selection Sort:

package com.dsa;

import java.util.Arrays;

public class SelectionSort {
	public static void main(String[] args) {
		int a[] = { 12, 78, 45, 34, 2 };
		selectionSort(a, a.length);
		System.out.println(Arrays.toString(a));
	}

	public static void selectionSort(int a[], int n) {
		for(int i=0;i<n-1;i++)
		{
			int min=i;
			for(int j=i+1;j<n;j++)
			{
				if(a[j]<a[min])
				{
					min=j;
				}
			}
			int temp=a[min];
			a[min]=a[i];
			a[i]=temp;
		}
	}
}


Quick Sort:


package com.dsa;

import java.util.Arrays;

public class QuickSort {
	public static void main(String[] args) {
		int arr[] = { 4, 6, 2, 8, 1, 5, 7, 3 };
		quickSort(arr, 0, arr.length - 1);
		System.out.println(Arrays.toString(arr));
	}

	private static void quickSort(int[] arr, int low, int high) {
		if (low < high) {
			int pIndex = partition(arr, low, high);
			quickSort(arr, low, pIndex - 1);
			quickSort(arr, pIndex + 1, high);
		}
	}

	private static int partition(int[] a, int low, int high) {
		int pivot = a[low];
		int i = low;
		int j = high;

		while (i < j) {
			while (a[i] <= pivot && i < high) {
				i++;
			}
			while (a[j] > pivot && j > low) {
				j--;
			}
			if (i < j) {
				swap(a, i, j);
			}
		}
		swap(a, low, j);
		return j;
	}

	private static void swap(int[] a, int i, int j) {
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
}


Merge Sort:

package com.dsa;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MergeSort {
	public static void main(String[] args) {
		int arr[] = { 4, 6, 2, 8, 1, 5, 7, 3 };
		mergeSort(arr, 0, arr.length - 1);
		System.out.println("After Sorting:" + Arrays.toString(arr));
	}

	private static void mergeSort(int[] arr, int low, int high) {
		if (low >= high) {
			return;
		}
		int mid = (low + high) / 2;
		mergeSort(arr, low, mid);
		mergeSort(arr, mid + 1, high);
		merge(arr, low, mid, high);
	}

	private static void merge(int[] arr, int low, int mid, int high) {
		List<Integer> temp = new ArrayList<>();
		int left = low;
		int right = mid + 1;
		while (left <= mid && right <= high) {
			if (arr[left] < arr[right]) {
				temp.add(arr[left]);
				left++;
			} else {
				temp.add(arr[right]);
				right++;
			}
		}

		while (left <= mid) {
			temp.add(arr[left]);
			left++;
		}
		while (right <= high) {
			temp.add(arr[right]);
			right++;
		}

		for (int i = low; i <= high; i++) {
			arr[i] = temp.get(i - low);
		}
	}
}
